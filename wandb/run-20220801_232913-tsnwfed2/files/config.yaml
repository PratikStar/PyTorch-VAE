wandb_version: 1

_wandb:
  desc: null
  value:
    cli_version: 0.12.21
    framework: lightning
    is_jupyter_run: false
    is_kaggle_kernel: false
    python_version: 3.8.8
    start_time: 1659364153
    t:
      1:
      - 1
      - 5
      - 9
      - 41
      - 51
      - 53
      - 55
      2:
      - 1
      - 3
      - 5
      - 9
      - 41
      - 51
      - 53
      - 55
      3:
      - 16
      4: 3.8.8
      5: 0.12.21
      8:
      - 5
config:
  desc: null
  value:
    data_params:
      batch_size: 16
      csv:
        enabled: true
        path: ../log
      dataset_path: ../../data/timbre
      num_workers: 0
      saver:
        enabled: false
        save_dir: ../out
      spectrogram:
        mel:
          frame_size: 1024
          hop_length: 256
          segment_signal_length: 16000
          spectrogram_dims:
          - 80
          - 63
        stft:
          spectrogram_dims:
          - 80
          - 63
        type: mel
      visualizer:
        enabled: false
        save_dir: ../out
    exp_params:
      LR: 0.0001
      kld_weight: 1.0e-06
      manual_seed: 1265
      scheduler_gamma: 0.95
      weight_decay: 0.0
    log_level: 6
    logging_params:
      name: MusicVAEFlat
      save_dir: logs/
    model_params:
      conv2d_channels:
      - 128
      - 64
      - 32
      - 16
      kernel_size:
      - 3
      - 3
      latent_dim: 32
      loss:
        function: L1
      name: MusicVAEFlat
      output_padding:
      - 1
      - 0
      padding:
      - 1
      - 1
      spectrogram_dims:
      - 1
      - 80
      - 63
      stride:
      - 2
      - 1
    show_logs: true
    trainer_params:
      gpus: []
      max_epochs: 100
vae_model:
  desc: null
  value: "MusicVAEFlat(\n  (encoder): Sequential(\n    (0): Sequential(\n      (conv2d_0):\
    \ Conv2d(1, 128, kernel_size=(3, 3), stride=(2, 1), padding=(1, 1))\n      (batchNorm2d_0):\
    \ BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n\
    \      (leakyReLU_0): LeakyReLU(negative_slope=0.01)\n    )\n    (1): Sequential(\n\
    \      (conv2d_1): Conv2d(128, 64, kernel_size=(3, 3), stride=(2, 1), padding=(1,\
    \ 1))\n      (batchNorm2d_1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True,\
    \ track_running_stats=True)\n      (leakyReLU_1): LeakyReLU(negative_slope=0.01)\n\
    \    )\n    (2): Sequential(\n      (conv2d_2): Conv2d(64, 32, kernel_size=(3,\
    \ 3), stride=(2, 1), padding=(1, 1))\n      (batchNorm2d_2): BatchNorm2d(32, eps=1e-05,\
    \ momentum=0.1, affine=True, track_running_stats=True)\n      (leakyReLU_2): LeakyReLU(negative_slope=0.01)\n\
    \    )\n  )\n  (fc_mu): Sequential(\n    (conv2d_fc_mu): Conv2d(32, 16, kernel_size=(3,\
    \ 3), stride=(2, 1), padding=(1, 1))\n    (batchNorm2d_fc_mu): BatchNorm2d(16,\
    \ eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n    (leakyReLU_fc_mu):\
    \ LeakyReLU(negative_slope=0.01)\n  )\n  (fc_var): Sequential(\n    (conv2d_fc_var):\
    \ Conv2d(32, 16, kernel_size=(3, 3), stride=(2, 1), padding=(1, 1))\n    (batchNorm2d_fc_var):\
    \ BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n\
    \    (leakyReLU_fc_var): LeakyReLU(negative_slope=0.01)\n  )\n  (decoder): Sequential(\n\
    \    (0): Sequential(\n      (convTranspose2d_1): ConvTranspose2d(16, 32, kernel_size=(3,\
    \ 3), stride=(2, 1), padding=(1, 1), output_padding=(1, 0))\n      (batchnorm2d_1):\
    \ BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n\
    \      (leakyReLU_1): LeakyReLU(negative_slope=0.01)\n    )\n    (1): Sequential(\n\
    \      (convTranspose2d_2): ConvTranspose2d(32, 64, kernel_size=(3, 3), stride=(2,\
    \ 1), padding=(1, 1), output_padding=(1, 0))\n      (batchnorm2d_2): BatchNorm2d(64,\
    \ eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (leakyReLU_2):\
    \ LeakyReLU(negative_slope=0.01)\n    )\n    (2): Sequential(\n      (convTranspose2d_3):\
    \ ConvTranspose2d(64, 128, kernel_size=(3, 3), stride=(2, 1), padding=(1, 1),\
    \ output_padding=(1, 0))\n      (batchnorm2d_3): BatchNorm2d(128, eps=1e-05, momentum=0.1,\
    \ affine=True, track_running_stats=True)\n      (leakyReLU_3): LeakyReLU(negative_slope=0.01)\n\
    \    )\n  )\n  (final_layer): Sequential(\n    (final_convTranspose2d): ConvTranspose2d(128,\
    \ 128, kernel_size=(3, 3), stride=(2, 1), padding=(1, 1), output_padding=(1, 0))\n\
    \    (final_batchNorm2d): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True,\
    \ track_running_stats=True)\n    (final_leakyReLU): LeakyReLU(negative_slope=0.01)\n\
    \    (final_Conv2d): Conv2d(128, 1, kernel_size=(3, 3), stride=(1, 1), padding=(1,\
    \ 1))\n    (final_tanH): Sigmoid()\n  )\n)"
